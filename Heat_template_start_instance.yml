

heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

# Declare parameters 
parameters:

  image1:
    type: string
    label: Image name or ID
    description: Image Ansible Master
    default: 6832b560-a410-4040-ae22-b8d9e9bfcd26

  image2:
    type: string
    label: Image name or ID
    description: Image Spark Master
    default: c1502f60-02c5-4bee-8849-536ffb36b8fe

  image3:
    type: string
    label: Image name or ID
    description: Image Spark Worker
    default: 0d09edc1-70c8-433b-9b1f-5bc98b425636


  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: ACCHT18.normal

  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: group8key

  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: Public External IPv4 Network

# Resource allocation
resources:
  cluster_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: qtlaas
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
 
  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 130.238.164.6 
        - 130.238.4.133 
        - 130.238.7.10
        - 130.239.1.90
        - 129.16.1.53
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  instance_port0:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: cluster_sg } 
 #masters 
 
  spark_master:
    type: OS::Nova::Server
    properties:
      image: { get_param: image2 }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      #security_groups:
      #  - { get_resource: cluster_sg }
      networks:
        - port: { get_resource: instance_port0 }         
      user_data: |
        #!/bin/sh
        echo "Hello, World!"
        apt-add-repository -y ppa:ansible/ansible
        apt-get update -y
        apt-get upgrade -y
        apt-get install -y ansible
      user_data_format: RAW

  ansible_master:
    type: OS::Nova::Server
    properties:
      image: { get_param: image1 }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      #security_groups:
      #  - { get_resource: cluster_sg }
      networks:
        - port: { get_resource: instance_port0 }
      user_data: 
      str_replace:
       template: |	
		        #!/bin/sh
			echo "Hello, World!"
			apt-get update -y
			apt-get upgrade -y
			echo ansible_ip group8ansiblemaster > /etc/hosts
			echo sparkmaster_ip group8sparkmaster >> /etc/hosts
			echo sparkworker_ip group8sparkworker >> /etc/hosts
			echo group8ansiblemaster ansible_ssh_host=ansible_ip > /etc/ansible/hosts
			echo group8sparkmaster ansible_ssh_host=sparkmaster_ip >> /etc/ansible/hosts
			echo group8sparkworker ansible_ssh_host=sparkworker_ip >> /etc/ansible/hosts
			echo [configNode] >> /etc/ansible/hosts
			echo group8ansiblemaster ansible_connection=local ansible_user=ubuntu >> /etc/ansible/hosts
			echo [sparkmaster] >> /etc/ansible/hosts
			echo group8sparkmaster ansible_connection=local ansible_user=ubuntu >> /etc/ansible/hosts
			echo [sparkworker] >> /etc/ansible/hosts
			echo group8sparkworker ansible_connection=local ansible_user=ubuntu >> /etc/ansible/hosts
		params:
			ansible_ip: { get_attr: [ansible_master, networks, private, 0] }
			sparkmaster_ip: { get_attr: [spark_master, networks, private, 0] }
			sparkworker_ip: { get_attr: [worker_instance0, networks, private, 0] }
      user_data_format: RAW
      
      
      #workers 
      
       worker_instance0:
    type: OS::Nova::Server
    properties:
      image: { get_param: image3 }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      #security_groups:
      #  - { get_resource: cluster_sg }
      networks:
        - port: { get_resource: instance_port0 }
      user_data: |
        #!/bin/sh
        echo "Hello, World!"
        apt-get update -y
        apt-get upgrade -y
      user_data_format: RAW
      


  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: instance_port0 } 

# Output in case of successful booting
outputs:

 spark_name:
    description: Name of the instance
    value: { get_attr: [spark_master, name] }
  spark_ip:
    description: IP address of the instance
    value: { get_attr: [spark_master, first_address, floating_ip, floating_ip_address] }
  
 ansible_name:
    description: Name of the instance
    value: { get_attr: [ansible_master, name] }
  ansible_ip:
    description: IP address of the instance
    value: { get_attr: [ansible_master, first_address, floating_ip, floating_ip_address] }
    
  worker_name:
    description: Name of the instance
    value: { get_attr: [worker_instance0, name] }
  worker_ip:
    description: IP address of the instance
    value: { get_attr: [worker_instance0, first_address] }
